pipeline {
    agent any

    tools {
        maven 'app-maven' // Replace with your configured Maven version in Jenkins
    }    

    environment {
        AWS_REGION = 'us-east-2' // Update the region as needed
        ECR_REPO = '010438494949.dkr.ecr.us-east-2.amazonaws.com/jenkins-repo'
        IMAGE_TAG = "my-java-app:${env.BUILD_ID}"
    }

    stages {
        stage('Clone Repository') {
            steps {
                git url: 'https://github.com/Bennymce/Deploying-to-eks-using-jenkins.git', 
                    branch: 'main', // Change 'main' to your branch if different
                    credentialsId: 'github-credentials'
            }
        }

        stage('Build with Maven') {
            steps {
                dir('simple-java-app') { 
                    sh 'mvn clean package'
                }
            }
        }

        stage('List Root Directory') {
            steps {
                sh 'ls -la'
            }
        }

        stage('List Target Directory') {
            steps {
                dir('simple-java-app') {
                    sh 'ls -la target'
                }
            }
        }

        stage('Check Dockerfile') {
            steps {
                dir('simple-java-app') {
                    sh 'ls -la Dockerfile'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image with tag: ${IMAGE_TAG}"
                    dir('simple-java-app') {
                        docker.build("${IMAGE_TAG}", ".")
                    }
                }
            }
        }

        stage('Scan Docker Image') {
            steps {
                script {
                    sh "trivy image ${IMAGE_TAG}" // Assuming Trivy is installed
                }
            }
        }

        // Uncomment the following stages once you're ready to log in and push to ECR

        // stage('Login to AWS ECR') {
        //     steps {
        //         script {
        //             withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
        //                 def loginCommand = "aws ecr get-login-password --region ${AWS_REGION}"
        //                 sh "${loginCommand} | docker login --username AWS --password-stdin ${ECR_REPO}"
        //             }
        //         }
        //     }
        // }

        // stage('Push to ECR') {
        //     steps {
        //         script {
        //             sh "docker tag ${IMAGE_TAG} ${ECR_REPO}:${env.BUILD_ID}"
        //             sh "docker push ${ECR_REPO}:${env.BUILD_ID}"
        //         }
        //     }
        // }
    }

    post {
        always {
            cleanWs() // Clean workspace after the build
        }
    }
}
